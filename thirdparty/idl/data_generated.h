// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATA_COBA_H_
#define FLATBUFFERS_GENERATED_DATA_COBA_H_

#include "flatbuffers/flatbuffers.h"

namespace Coba {

struct FooBar;

struct FooBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAMA = 6,
    VT_DISETKAH = 8,
    VT_NUMBERS = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool mutate_id(int32_t _id) {
    return SetField<int32_t>(VT_ID, _id, 0);
  }
  const flatbuffers::String *nama() const {
    return GetPointer<const flatbuffers::String *>(VT_NAMA);
  }
  flatbuffers::String *mutable_nama() {
    return GetPointer<flatbuffers::String *>(VT_NAMA);
  }
  bool disetkah() const {
    return GetField<uint8_t>(VT_DISETKAH, 0) != 0;
  }
  bool mutate_disetkah(bool _disetkah) {
    return SetField<uint8_t>(VT_DISETKAH, static_cast<uint8_t>(_disetkah), 0);
  }
  const flatbuffers::Vector<int32_t> *numbers() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NUMBERS);
  }
  flatbuffers::Vector<int32_t> *mutable_numbers() {
    return GetPointer<flatbuffers::Vector<int32_t> *>(VT_NUMBERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_NAMA) &&
           verifier.VerifyString(nama()) &&
           VerifyField<uint8_t>(verifier, VT_DISETKAH) &&
           VerifyOffset(verifier, VT_NUMBERS) &&
           verifier.VerifyVector(numbers()) &&
           verifier.EndTable();
  }
};

struct FooBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FooBar::VT_ID, id, 0);
  }
  void add_nama(flatbuffers::Offset<flatbuffers::String> nama) {
    fbb_.AddOffset(FooBar::VT_NAMA, nama);
  }
  void add_disetkah(bool disetkah) {
    fbb_.AddElement<uint8_t>(FooBar::VT_DISETKAH, static_cast<uint8_t>(disetkah), 0);
  }
  void add_numbers(flatbuffers::Offset<flatbuffers::Vector<int32_t>> numbers) {
    fbb_.AddOffset(FooBar::VT_NUMBERS, numbers);
  }
  explicit FooBarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBarBuilder &operator=(const FooBarBuilder &);
  flatbuffers::Offset<FooBar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FooBar>(end);
    return o;
  }
};

inline flatbuffers::Offset<FooBar> CreateFooBar(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> nama = 0,
    bool disetkah = false,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> numbers = 0) {
  FooBarBuilder builder_(_fbb);
  builder_.add_numbers(numbers);
  builder_.add_nama(nama);
  builder_.add_id(id);
  builder_.add_disetkah(disetkah);
  return builder_.Finish();
}

inline flatbuffers::Offset<FooBar> CreateFooBarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *nama = nullptr,
    bool disetkah = false,
    const std::vector<int32_t> *numbers = nullptr) {
  return Coba::CreateFooBar(
      _fbb,
      id,
      nama ? _fbb.CreateString(nama) : 0,
      disetkah,
      numbers ? _fbb.CreateVector<int32_t>(*numbers) : 0);
}

inline const Coba::FooBar *GetFooBar(const void *buf) {
  return flatbuffers::GetRoot<Coba::FooBar>(buf);
}

inline const Coba::FooBar *GetSizePrefixedFooBar(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Coba::FooBar>(buf);
}

inline FooBar *GetMutableFooBar(void *buf) {
  return flatbuffers::GetMutableRoot<FooBar>(buf);
}

inline bool VerifyFooBarBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Coba::FooBar>(nullptr);
}

inline bool VerifySizePrefixedFooBarBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Coba::FooBar>(nullptr);
}

inline void FinishFooBarBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Coba::FooBar> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFooBarBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Coba::FooBar> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Coba

#endif  // FLATBUFFERS_GENERATED_DATA_COBA_H_
